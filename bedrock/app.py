#!/usr/bin/env python3
"""
AWS Bedrock ‰∏ú‰∫¨Âå∫ÂüüÔºàap-northeast-1ÔºâClaude ÊµãËØïËÑöÊú¨
‰ΩøÁî®APACÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂
"""

import boto3
import json
from botocore.exceptions import ClientError

def test_tokyo_bedrock():
    """ÊµãËØï‰∏ú‰∫¨Âå∫ÂüüÁöÑBedrock ClaudeËÆøÈóÆ"""
    
    print("=== AWS Bedrock ‰∏ú‰∫¨Âå∫ÂüüÊµãËØï ===")
    
    # ÂàùÂßãÂåñ‰∏ú‰∫¨Âå∫ÂüüÂÆ¢Êà∑Á´Ø
    region_name = 'ap-northeast-1'  # ‰∏ú‰∫¨Âå∫Âüü
    
    try:
        bedrock_runtime = boto3.client('bedrock-runtime', region_name=region_name)
        bedrock = boto3.client('bedrock', region_name=region_name)
        print(f"‚úÖ BedrockÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÊàêÂäü - Âå∫Âüü: {region_name}")
    except Exception as e:
        print(f"‚ùå ÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÂ§±Ë¥•: {e}")
        return
    
    # ‰∏ú‰∫¨Âå∫ÂüüÂèØÁî®ÁöÑAPACÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂
    apac_inference_profiles = [
        # APAC Claude Sonnet 4 - ÊúÄÊñ∞Ê®°Âûã
        'apac.anthropic.claude-sonnet-4-20250514-v1:0',
        
        # APAC Claude 3.5 Sonnet v2
        'apac.anthropic.claude-3-5-sonnet-20241022-v2:0',
        
        # APAC Claude 3.5 Sonnet v1 
        'apac.anthropic.claude-3-5-sonnet-20240620-v1:0',
        
        # APAC Claude 3.7 Sonnet (Â¶ÇÊûúÂèØÁî®)
        'apac.anthropic.claude-3-7-sonnet-20241125-v1:0',
        
        # APAC Claude 3 Sonnet (Â§áÁî®)
        'apac.anthropic.claude-3-sonnet-20240229-v1:0',
        
        # APAC Claude 3 Haiku (ËΩªÈáèÁ∫ßÈÄâÈ°π)
        'apac.anthropic.claude-3-haiku-20240307-v1:0',
    ]
    
    # È¶ñÂÖàÂàóÂá∫ÂèØÁî®ÁöÑÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂
    print("\n1. Ê£ÄÊü•ÂèØÁî®ÁöÑÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂...")
    try:
        response = bedrock.list_inference_profiles()
        profiles = response.get('inferenceProfileSummaries', [])
        
        claude_profiles = []
        for profile in profiles:
            if 'claude' in profile['inferenceProfileName'].lower():
                claude_profiles.append({
                    'id': profile['inferenceProfileId'],
                    'name': profile['inferenceProfileName'],
                    'status': profile['status'],
                    'type': profile.get('type', 'N/A')
                })
        
        if claude_profiles:
            print("‚úÖ ÊâæÂà∞ClaudeÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂:")
            for profile in claude_profiles:
                print(f"   üìã ID: {profile['id']}")
                print(f"      ÂêçÁß∞: {profile['name']}")
                print(f"      Áä∂ÊÄÅ: {profile['status']}")
                print(f"      Á±ªÂûã: {profile['type']}")
                print("-" * 50)
        else:
            print("‚ö†Ô∏è  Êú™ÊâæÂà∞ClaudeÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂Ôºå‰ΩÜÂ∞ÜÁªßÁª≠ÊµãËØïÈ¢ÑÂÆö‰πâID")
            
    except Exception as e:
        print(f"‚ùå Ëé∑ÂèñÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂Êó∂Âá∫Èîô: {e}")
        print("   ÁªßÁª≠‰ΩøÁî®È¢ÑÂÆö‰πâÁöÑÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂ID...")
    
    # ÊµãËØï‰∏çÂêåÁöÑÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂
    print(f"\n2. ÊµãËØï {len(apac_inference_profiles)} ‰∏™APACÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂...")
    successful_model_id = None
    
    for i, model_id in enumerate(apac_inference_profiles, 1):
        print(f"\n{i}. ÊµãËØïÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂: {model_id}")
        
        try:
            # ÊûÑÂª∫ÊµãËØïËØ∑Ê±Ç
            body = {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 150,
                "messages": [
                    {
                        "role": "user",
                        "content": "‰Ω†Â•ΩÔºÅËØ∑Áî®‰∏≠ÊñáÁÆÄÂçï‰ªãÁªç‰∏Ä‰∏ã‰Ω†Ëá™Â∑±ÔºåÂπ∂ËØ¥Êòé‰Ω†ÊòØÂì™‰∏™ÁâàÊú¨ÁöÑClaude„ÄÇ"
                    }
                ],
                "temperature": 0.7,
                "top_p": 0.9
            }
            
            # ÂèëÈÄÅËØ∑Ê±Ç
            response = bedrock_runtime.invoke_model(
                modelId=model_id,  # ‰ΩøÁî®APACÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂ID
                contentType='application/json',
                accept='application/json',
                body=json.dumps(body)
            )
            
            # Ëß£ÊûêÂìçÂ∫î
            response_body = json.loads(response['body'].read())
            claude_response = response_body['content'][0]['text']
            
            print(f"   ‚úÖ ÊàêÂäüÔºÅ")
            print(f"   üìù ClaudeÂõûÂ§ç: {claude_response}")
            successful_model_id = model_id
            break
            
        except ClientError as e:
            error_code = e.response['Error']['Code']
            error_message = e.response['Error']['Message']
            print(f"   ‚ùå Â§±Ë¥•: {error_code}")
            
            if error_code == 'ValidationException':
                if 'model identifier' in error_message.lower():
                    print("      ÈîôËØØ: Êó†ÊïàÁöÑÊ®°ÂûãÊ†áËØÜÁ¨¶")
                elif 'on-demand throughput' in error_message.lower():
                    print("      ÈîôËØØ: ÈúÄË¶Å‰ΩøÁî®Êé®ÁêÜÈÖçÁΩÆÊñá‰ª∂")
                else:
                    print(f"      ËØ¶ÊÉÖ: {error_message}")
            elif error_code == 'AccessDeniedException':
                print(f"      ÈîôËØØ: ËÆøÈóÆË¢´ÊãíÁªù - ËØ∑Ê£ÄÊü•Ê®°ÂûãËÆøÈóÆÊùÉÈôê")
            elif error_code == 'ThrottlingException':
                print(f"      ÈîôËØØ: ËØ∑Ê±ÇË¢´ÈôêÊµÅ - {error_message}")
            else:
                print(f"      ËØ¶ÊÉÖ: {error_message}")
                
        except Exception as e:
            print(f"   ‚ùå ÂÖ∂‰ªñÈîôËØØ: {e}")
    
    # ÊµãËØïÂµåÂÖ•ÂêëÈáèÔºàAmazon Titan EmbedÔºâ
    print(f"\n{'='*60}")
    print("3. ÊµãËØïÂµåÂÖ•ÂêëÈáèÔºàAmazon TitanÔºâ...")
    try:
        embed_body = {
            "inputText": "„Åì„Çå„ÅØÊó•Êú¨Ë™û„ÅÆ„ÉÜ„Çπ„Éà„ÉÜ„Ç≠„Çπ„Éà„Åß„Åô„ÄÇThis is a multilingual test.",
            "dimensions": 1024,
            "normalize": True
        }
        
        embed_response = bedrock_runtime.invoke_model(
            modelId='amazon.titan-embed-text-v2:0',
            contentType='application/json',
            accept='application/json',
            body=json.dumps(embed_body)
        )
        
        embed_result = json.loads(embed_response['body'].read())
        embedding = embed_result['embedding']
        
        print(f"‚úÖ ÂµåÂÖ•ÂêëÈáèÁîüÊàêÊàêÂäü")
        print(f"   üìê ÂêëÈáèÁª¥Â∫¶: {len(embedding)}")
        print(f"   üìä Ââç5‰∏™ÂÄº: {embedding[:5]}")
        
    except Exception as e:
        print(f"‚ùå ÂµåÂÖ•ÂêëÈáèÁîüÊàêÂ§±Ë¥•: {e}")
    
    # ÊµãËØïÂ§öËØ≠Ë®ÄÂµåÂÖ•
    print(f"\n4. ÊµãËØïÂ§öËØ≠Ë®ÄÂµåÂÖ•ÂêëÈáè...")
    multilingual_texts = [
        "‰∫∫Â∑•Êô∫ËÉΩÊ≠£Âú®ÊîπÂèò‰∏ñÁïå",  # ‰∏≠Êñá
        "‰∫∫Â∑•Áü•ËÉΩ„Åå‰∏ñÁïå„ÇíÂ§â„Åà„Å¶„ÅÑ„Çã",  # Êó•Êñá
        "Artificial intelligence is changing the world",  # Ëã±Êñá
    ]
    
    try:
        embeddings = []
        for text in multilingual_texts:
            embed_body = {
                "inputText": text,
                "dimensions": 512,  # ‰ΩøÁî®ËæÉÂ∞èÁª¥Â∫¶‰ª•ËäÇÁúÅËµÑÊ∫ê
                "normalize": True
            }
            
            response = bedrock_runtime.invoke_model(
                modelId='amazon.titan-embed-text-v2:0',
                contentType='application/json',
                accept='application/json',
                body=json.dumps(embed_body)
            )
            
            result = json.loads(response['body'].read())
            embeddings.append(result['embedding'])
        
        print("‚úÖ Â§öËØ≠Ë®ÄÂµåÂÖ•ÂêëÈáèÁîüÊàêÊàêÂäü")
        for i, text in enumerate(multilingual_texts):
            print(f"   üìù ÊñáÊú¨: {text}")
            print(f"   üìê ÂêëÈáèÁª¥Â∫¶: {len(embeddings[i])}")
        
        # ËÆ°ÁÆóÁõ∏‰ººÂ∫¶
        import numpy as np
        
        # ‰∏≠ÊñáÂíåÊó•ÊñáÁöÑÁõ∏‰ººÂ∫¶
        vec1 = np.array(embeddings[0])
        vec2 = np.array(embeddings[1])
        similarity = np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))
        print(f"   ü§ù ‰∏≠Êñá‰∏éÊó•ÊñáÁõ∏‰ººÂ∫¶: {similarity:.4f}")
        
        # ‰∏≠ÊñáÂíåËã±ÊñáÁöÑÁõ∏‰ººÂ∫¶
        vec3 = np.array(embeddings[2])
        similarity2 = np.dot(vec1, vec3) / (np.linalg.norm(vec1) * np.linalg.norm(vec3))
        print(f"   ü§ù ‰∏≠Êñá‰∏éËã±ÊñáÁõ∏‰ººÂ∫¶: {similarity2:.4f}")
        
    except Exception as e:
        print(f"‚ùå Â§öËØ≠Ë®ÄÂµåÂÖ•ÂêëÈáèÊµãËØïÂ§±Ë¥•: {e}")
    
    # ÊÄªÁªì
    print(f"\n{'='*60}")
    if successful_model_id:
        print(f"üéâ ÊµãËØïÂÆåÊàêÔºÅÂèØÁî®ÁöÑClaudeÊ®°ÂûãID: {successful_model_id}")
        print(f"\nüìã Âú®‰ª£Á†Å‰∏≠‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆ:")
        print(f"   Âå∫Âüü: {region_name}")
        print(f"   Êé®ÁêÜÈÖçÁΩÆÊñá‰ª∂ID: {successful_model_id}")
        print(f"\nüí° ‰ª£Á†ÅÁ§∫‰æã:")
        print(f"   bedrock_runtime = boto3.client('bedrock-runtime', region_name='{region_name}')")
        print(f"   claude_model_id = '{successful_model_id}'")
    else:
        print("‚ùå ÊâÄÊúâClaudeÊé®ÁêÜÈÖçÁΩÆÊñá‰ª∂ÈÉΩÊó†Ê≥ïËÆøÈóÆ")
        print("\nüîç ÊïÖÈöúÊéíÈô§Âª∫ËÆÆ:")
        print("1. Á°Æ‰øùÂú®AWS BedrockÊéßÂà∂Âè∞‰∏≠Áî≥ËØ∑‰∫ÜClaudeÊ®°ÂûãÁöÑËÆøÈóÆÊùÉÈôê")
        print("2. Ê£ÄÊü•IAMÊùÉÈôêÊòØÂê¶ÂåÖÂê´ bedrock:InvokeModel")
        print("3. Á°ÆËÆ§‰Ω†ÁöÑAWSË¥¶Êà∑Âú®ap-northeast-1Âå∫ÂüüÊúâBedrockËÆøÈóÆÊùÉÈôê")
        print("4. Ê£ÄÊü•AWSÂá≠ËØÅÈÖçÁΩÆÊòØÂê¶Ê≠£Á°Æ")

def check_tokyo_model_access():
    """Ê£ÄÊü•‰∏ú‰∫¨Âå∫ÂüüÁöÑÊ®°ÂûãËÆøÈóÆÊùÉÈôê"""
    print("=== Ê£ÄÊü•‰∏ú‰∫¨Âå∫ÂüüÊ®°ÂûãËÆøÈóÆÊùÉÈôê ===")
    
    try:
        bedrock = boto3.client('bedrock', region_name='ap-northeast-1')
        
        # ÂàóÂá∫Âü∫Á°ÄÊ®°Âûã
        response = bedrock.list_foundation_models(byProvider='Anthropic')
        models = response.get('modelSummaries', [])
        
        print("‚úÖ ÂèØÁî®ÁöÑAnthropicÊ®°Âûã:")
        for model in models:
            print(f"   üìã Ê®°ÂûãID: {model['modelId']}")
            print(f"      Ê®°ÂûãÂêçÁß∞: {model['modelName']}")
            print(f"      ËæìÂÖ•Á±ªÂûã: {model.get('inputModalities', [])}")
            print(f"      ËæìÂá∫Á±ªÂûã: {model.get('outputModalities', [])}")
            print("-" * 40)
        
        return len(models) > 0
        
    except Exception as e:
        print(f"‚ùå Ê£ÄÊü•Ê®°ÂûãËÆøÈóÆÊùÉÈôêÂ§±Ë¥•: {e}")
        return False

if __name__ == "__main__":
    # ÂÖàÊ£ÄÊü•Ê®°ÂûãËÆøÈóÆÊùÉÈôê
    if check_tokyo_model_access():
        print("\n" + "="*60)
        test_tokyo_bedrock()
    else:
        print("\nËØ∑ÂÖàÂú®AWS BedrockÊéßÂà∂Âè∞Áî≥ËØ∑AnthropicÊ®°ÂûãËÆøÈóÆÊùÉÈôê")
        print("ÊéßÂà∂Âè∞Âú∞ÂùÄ: https://ap-northeast-1.console.aws.amazon.com/bedrock/home?region=ap-northeast-1#/modelaccess")